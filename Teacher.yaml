openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: teacher
    description: Operations about teacher
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: student 
    description: Information about student 
paths:
  /student:
    post:
      tags:
        - student
      summary: Enter a new student
      description: This can only be done by the Entered in student
      operationId: createStudent
      requestBody:
        description: Created student object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
          application/xml:
            schema:
              $ref: '#/components/schemas/Student'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Student' 
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Student'
        '405':
          description: Invalid input
    get:
      tags:
         - student
      summary: Finds a student by Name and Id
      description: find a student 
      operationId: findStudent
      parameters:
        - name: id
          in: query
          description: put here the id and the name
          required: false
          explode: true
          schema:
            type: string
        - name: Name 
          in: query
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:students
            - read:students      
    put:
      tags:
        - student
      summary: Update student
      description: Update a student here
      operationId: updateStudent
      parameters:
        - name: Studentname
          in: query
          description: name that need to be UPDATED
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent student
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
          application/xml:
            schema:
              $ref: '#/components/schemas/Student'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - student
      summary: Delete student
      description: Delete a student.
      operationId: deleteStudent
      parameters:
        - name: Studentname
          in: query
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid Studentname supplied
        '404':
          description: Student not found
  /teacher:
    post:
      tags:
        - teacher
      summary: insert a teacher
      description: You can insert a techer here.
      operationId: insertTeacher
      requestBody:
        description: Created teacher object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
          application/xml:
            schema:
              $ref: '#/components/schemas/Teacher'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
            application/xml:
              schema:
                $ref: '#/components/schemas/Teacher'
    get:
      tags:
        - teacher
      summary: Find teacher by firstname
      description: ''
      operationId: getTeacherByFirstname
      parameters:
        - name: firstName
          in: query
          description: '  Find a Teacher here'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Teacher'
        '400':
          description: Invalid teachername supplied
        '404':
          description: Teacher not found
    put:
      tags:
        - teacher
      summary: Update teacher
      description: Update a teacher here
      operationId: updateTeacher
      parameters:
        - name: Teachername
          in: query
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent teacher
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
          application/xml:
            schema:
              $ref: '#/components/schemas/Teacher'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - teacher
      summary: Delete teacher
      description: Delete a teacher.
      operationId: deleteTeacher
      parameters:
        - name: Teachername
          in: query
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid teachername supplied
        '404':
          description: teacher not found
components:
  schemas:
    
    Teacher:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        Subject:
          type: object
          properties:
           name:
            type: string
            example: "Algorythmique"
           duration:
            type: string
            example: "50h00"
           code:
            type: string
            example: "Prog1"
      xml:
        name: teacher
    Student:
      type: object
      properties:
        id:
          type: string
          example: STD22107 
        Name:
          type: string
          example: Rakoto
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
        Groupe:
          type: string 
          example: H4
        Phone :
          type: integer
          example: 033082020
      xml:
        name: student
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header